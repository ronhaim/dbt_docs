{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.9.2", "generated_at": "2025-02-17T12:37:55.571274Z", "invocation_id": "bc32b9ae-3b2b-4855-a323-94e69826ed7d", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-17T12:37:50.269101Z", "completed_at": "2025-02-17T12:37:50.734815Z"}, {"name": "execute", "started_at": "2025-02-17T12:37:50.740695Z", "completed_at": "2025-02-17T12:37:50.740737Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.5804169178009033, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.passportcard_travel.stg_bronze__mrr_app_policy_benefit", "compiled": true, "compiled_code": "with \n\nsource as (\n\n    select * from `dev_passportcard_travel`.`bronze`.`mrr_app_policy_benefit`\n\n),\n\nrenamed as (\n\n    select\n        benefitid,\n        idpolicy,\n        policyid,\n        benefitname,\n        questionnaireid,\n        isreider,\n        startdate,\n        stopdate,\n        enddate,\n        needsdecision,\n        benefit_currency,\n        benefittypeid,\n        type,\n        coveredunits,\n        unitid,\n        eligibility_days,\n        waiting_payment_days,\n        copay_pcp_innet,\n        copay_pcp_pct,\n        copay_pcp_outnet,\n        copay_pcp_outnet_pct,\n        copay_pcp_notes,\n        copay_spc_innet,\n        copayspc_pct,\n        copay_spc_outnet,\n        copayspc_outnet_pct,\n        copay_spc_notes,\n        copay_er_innet,\n        copay_er_pct,\n        copay_er_outnet,\n        copay_er_outnet_pct,\n        copay_er_notes,\n        copay_rxg_innet,\n        copay_rxg_pct,\n        copay_rxg_outnet,\n        copay_rxg_outnet_pct,\n        copay_rxg_notes,\n        copay_rxb_innet,\n        copay_rxb_pct,\n        copay_rxb_outnet,\n        copay_rxb_outnet_pct,\n        copay_rxb_notes,\n        copay_rxnf_innet,\n        copay_rxnf_pct,\n        copay_rxnf_outnet,\n        copay_rxnf_outnet_pct,\n        copay_rxnf_notes,\n        max_copay_innet,\n        max_copay_pct,\n        max_copay_outnet,\n        max_copay_outnet_pct,\n        max_copay_notes,\n        rx_deduct_innet,\n        rx_deduct_outnet,\n        rx_deduct_notes,\n        deduct_ind_innet,\n        deduct_ind_outnet,\n        deduct_ind_notes,\n        deduct_fammax_innet,\n        deduct_fammax_outnet,\n        deduct_fammax_notes,\n        deduct_homeland_innet,\n        deduct_homeland_outnet,\n        deduct_homeland_notes,\n        coins_pct_innet,\n        coins_pct_outnet,\n        coins_pct_notes,\n        coins_indmin_innet,\n        coins_indmin_outnet,\n        coins_indmin_notes,\n        coins_indmax_innet,\n        coins_indmax_outnet,\n        coins_ind_notes,\n        coins_fammax_innet,\n        coins_fammax_outnet,\n        coins_fammax_notes,\n        oop_ind_innet,\n        oop_ind_outnet,\n        oop_ind_notes,\n        oop_fam_innet,\n        oop_fam_outnet,\n        oop_fam_notes,\n        ltm,\n        notes,\n        active,\n        isactive,\n        createdby,\n        datecreated,\n        lastupdated,\n        app_policy_types_mainid,\n        deductibles_type,\n        deduct_ind_percase_innet,\n        deduct_ind_percase_outnet,\n        deduct_ind_percase_notes,\n        dentalservice,\n        isr_health_fund,\n        isinternational,\n        description,\n        description_local,\n        lastupdatedby,\n        riskid,\n        unitedeligibility,\n        united_group,\n        united_submission,\n        medco_pol_name,\n        claimguidelinesdocid,\n        rider_type_id,\n        maxcommission,\n        allowpretripclaims,\n        benefitdisplayname\n\n    from source\n\n)\n\nselect * from renamed", "relation_name": "`dev_passportcard_travel`.`dbt_ronhaim_stg`.`stg_bronze__mrr_app_policy_benefit`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-17T12:37:50.313226Z", "completed_at": "2025-02-17T12:37:50.738739Z"}, {"name": "execute", "started_at": "2025-02-17T12:37:50.745191Z", "completed_at": "2025-02-17T12:37:50.745211Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.5782217979431152, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.passportcard_travel.stg_bronze__mrr_app_policy", "compiled": true, "compiled_code": "with \n\nsource as (\n\n    select * from `dev_passportcard_travel`.`bronze`.`mrr_app_policy`\n\n),\n\nrenamed as (\n\n    select\n        policyid,\n        customerid,\n        parentid,\n        idpolicy,\n        policynumber,\n        memberid,\n        member_id,\n        statusid,\n        policystartdate,\n        policyenddate,\n        continuitydate,\n        premiumenddate,\n        canceldate,\n        decisionid,\n        quoteid,\n        app_medical_customerid,\n        pending_status,\n        cancellettersent,\n        lastupdated,\n        lastupdatedby,\n        datecreated,\n        createdby,\n        companyid,\n        authorizedconvert,\n        converted_member_id,\n        continue_policy_run,\n        picc_policynumber,\n        picc_appnum,\n        purposeid,\n        days,\n        ispiccinserted,\n        piccpaymentstatus,\n        new_policysmssent,\n        piccsmsremindersent,\n        saleby,\n        uhi_eligibility_status,\n        companies_travel_bankofdaysid,\n        picc_reinsurancenum,\n        app_policy_ownerid,\n        companyagreementsid,\n        dc_payeeid,\n        picc_reinsurance_planname,\n        travelpolicynumber,\n        picc_reinsurance_receivedate,\n        dc_pod_companyagreementsid,\n        associationid,\n        countryoforiginid,\n        customerapproved,\n        customerapproveddetailsdate,\n        savepolicydetailsatoarchive,\n        savequestionnairetoarchive,\n        lifecompanyagreementsid,\n        praticipntid,\n        uhi_eligibility_file_status,\n        istestedbychgbckprocess,\n        isquestionnairechecked,\n        isexcludefromdeletion,\n        cancelationeffectivedate,\n        isfx,\n        fxoperationmodel,\n        fxusage,\n        basicquotedetailsid,\n        policycancellationsourceid\n\n    from source\n\n)\n\nselect * from renamed", "relation_name": "`dev_passportcard_travel`.`dbt_ronhaim_stg`.`stg_bronze__mrr_app_policy`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-17T12:37:50.282491Z", "completed_at": "2025-02-17T12:37:50.791931Z"}, {"name": "execute", "started_at": "2025-02-17T12:37:50.798031Z", "completed_at": "2025-02-17T12:37:50.798052Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.6472647190093994, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.passportcard_travel.stg_bronze__mrr_app_policy_benefit_types", "compiled": true, "compiled_code": "with \n\nsource as (\n\n    select * from `dev_passportcard_travel`.`bronze`.`mrr_app_policy_benefit_types`\n\n),\n\nrenamed as (\n\n    select\n        benefittypeid,\n        benefittype,\n        benefittype_eng\n\n    from source\n\n)\n\nselect * from renamed", "relation_name": "`dev_passportcard_travel`.`dbt_ronhaim_stg`.`stg_bronze__mrr_app_policy_benefit_types`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-17T12:37:50.237112Z", "completed_at": "2025-02-17T12:37:50.809825Z"}, {"name": "execute", "started_at": "2025-02-17T12:37:50.825863Z", "completed_at": "2025-02-17T12:37:50.825886Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.705977201461792, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.passportcard_travel.stg_bronze__mrr_agents", "compiled": true, "compiled_code": "with \n\nsource as (\n\n    select * from `dev_passportcard_travel`.`bronze`.`mrr_agents`\n\n),\n\nrenamed as (\n\n    select\n        agentid,\n        agentparentid,\n        agentgroupid,\n        agenttypeid,\n        insurancecompanyid,\n        supervisorid,\n        agencyid,\n        saleagentcommission,\n        saleagentadvpay,\n        firstname,\n        lastname,\n        englishfirstname,\n        englishmiddlename,\n        englishlastname,\n        emailaddress,\n        personalid,\n        agentpermitnumber,\n        agentpermit_startdate,\n        agentpermit_validdate,\n        authorized_in_life,\n        authorized_in_property,\n        authorized_in_accidents,\n        authorized_in_naval,\n        withholdingtax_pct,\n        withholdingtax_validdate,\n        bookkeeping_affirmation_date,\n        status,\n        vipcode,\n        notes,\n        webusername,\n        webpassword,\n        requiresupdatetotpa,\n        weberp,\n        lastupdatedby,\n        datecreated,\n        createdby,\n        temp_old_agentid,\n        lastupdated,\n        authorized_make_policy,\n        authorized_change_policy,\n        authorized_creditcard,\n        authorized_view_commissions,\n        agent_payment_typeid,\n        creditdays,\n        depositbalance,\n        paymentincludingvat,\n        agent_distributor_channelid,\n        issenttodavidcard,\n        isactive,\n        policy_types_mainid,\n        customerfilemanagerid,\n        hasaffiliateidinsite,\n        marketingname,\n        salesmanagerid,\n        agentwebsite,\n        authorized_in_health,\n        authorized_in_general,\n        agentcommissionemail,\n        masterentityid,\n        preventcontactwithcustomersbyds,\n        allowcontactwithcustomersbyds,\n        isspecial,\n        isfreezecommpayment,\n        business_location_id,\n        website_volume_id,\n        insurance_branches,\n        no_of_employees_id,\n        branch_volume,\n        mailing_approval,\n        agent_dob,\n        branches,\n        insurances_sold,\n        isbrokerfeepaymententity,\n        abn,\n        acn,\n        commissionrates,\n        hasnovat,\n        preferredlanguage,\n        isexpiredpermitblock,\n        isexpiredpermitblockdate,\n        expiredpermitblocksentemaildate,\n        closingdate,\n        closedby,\n        freezingduetoagentsdeath,\n        dateoffreezing,\n        closereason,\n        iscaseopenduepassaway,\n        sapnumber\n\n    from source\n\n)\n\nselect * from renamed", "relation_name": "`dev_passportcard_travel`.`dbt_ronhaim_stg`.`stg_bronze__mrr_agents`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-17T12:37:50.861733Z", "completed_at": "2025-02-17T12:37:51.005722Z"}, {"name": "execute", "started_at": "2025-02-17T12:37:51.013636Z", "completed_at": "2025-02-17T12:37:51.013669Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.2665693759918213, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.passportcard_travel.stg_bronze__mrr_app_policy_coverage", "compiled": true, "compiled_code": "with \n\nsource as (\n\n    select * from `dev_passportcard_travel`.`bronze`.`mrr_app_policy_coverage`\n\n),\n\nrenamed as (\n\n    select\n        coverageid,\n        policyid,\n        idpolicy,\n        benefitid,\n        isrider,\n        units,\n        priceid,\n        decisionid,\n        statusid,\n        cov_start_date,\n        cov_end_date,\n        continuitydate,\n        premiumenddate,\n        canceldate,\n        lastupdate,\n        paymentid,\n        payer_objecttype,\n        payer_objectid,\n        notes,\n        createdby,\n        datecreated,\n        lastupdatedby,\n        lastupdated,\n        fixprice,\n        needpayment2,\n        payment1pct,\n        paymentid2,\n        paymentincuw,\n        riskgroupid,\n        isperiodicrider,\n        cancelationeffectivedate\n\n    from source\n\n)\n\nselect * from renamed", "relation_name": "`dev_passportcard_travel`.`dbt_ronhaim_stg`.`stg_bronze__mrr_app_policy_coverage`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-17T12:37:50.870956Z", "completed_at": "2025-02-17T12:37:51.006738Z"}, {"name": "execute", "started_at": "2025-02-17T12:37:51.019870Z", "completed_at": "2025-02-17T12:37:51.019891Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.2670583724975586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.passportcard_travel.stg_bronze__mrr_app_policy_discount", "compiled": true, "compiled_code": "with \n\nsource as (\n\n    select * from `dev_passportcard_travel`.`bronze`.`mrr_app_policy_discount`\n\n),\n\nrenamed as (\n\n    select\n        discountid,\n        coverageid,\n        discounttypeid,\n        fromdate,\n        untildate,\n        pct,\n        sum,\n        periods,\n        isactive,\n        approvedby,\n        dateapproved,\n        notes,\n        createdby,\n        datecreated,\n        lastupdatedby,\n        lastupdated,\n        deletedecisionby,\n        deletedecisiondate,\n        deleterequestby,\n        deletionstate,\n        caseid\n\n    from source\n\n)\n\nselect * from renamed", "relation_name": "`dev_passportcard_travel`.`dbt_ronhaim_stg`.`stg_bronze__mrr_app_policy_discount`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-17T12:37:50.989872Z", "completed_at": "2025-02-17T12:37:51.133153Z"}, {"name": "execute", "started_at": "2025-02-17T12:37:51.154990Z", "completed_at": "2025-02-17T12:37:51.155018Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.2903902530670166, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.passportcard_travel.stg_bronze__mrr_app_policy_product_types", "compiled": true, "compiled_code": "with \n\nsource as (\n\n    select * from `dev_passportcard_travel`.`bronze`.`mrr_app_policy_product_types`\n\n),\n\nrenamed as (\n\n    select\n        app_policy_product_typesid,\n        product_type_name,\n        createdby,\n        datecreated,\n        lastupdatedby,\n        lastupdated,\n        isactive\n\n    from source\n\n)\n\nselect * from renamed", "relation_name": "`dev_passportcard_travel`.`dbt_ronhaim_stg`.`stg_bronze__mrr_app_policy_product_types`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-17T12:37:50.965518Z", "completed_at": "2025-02-17T12:37:51.109651Z"}, {"name": "execute", "started_at": "2025-02-17T12:37:51.131729Z", "completed_at": "2025-02-17T12:37:51.131753Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.3080708980560303, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.passportcard_travel.stg_bronze__mrr_app_policy_groups", "compiled": true, "compiled_code": "with \n\nsource as (\n\n    select * from `dev_passportcard_travel`.`bronze`.`mrr_app_policy_groups`\n\n),\n\nrenamed as (\n\n    select\n        idpolicy,\n        policytypeid,\n        policyname,\n        description,\n        startdate,\n        enddate,\n        counterid,\n        status,\n        qtypeid,\n        agegrouptypeid,\n        policydecisiongroupid,\n        group_type,\n        commissionsalepercent,\n        commissionreppercent,\n        commissiongrouppercent,\n        currencyid,\n        united_group,\n        united_submission,\n        medco_pol_name,\n        agencycommissionpct,\n        bordereaugroup,\n        benefits,\n        riders_included,\n        isactive,\n        createdby,\n        datecreated,\n        lastupdate,\n        showininternetquote,\n        insurancecompanyid,\n        supplierid,\n        conversionid,\n        piccplanname,\n        app_policy_reports_groupid,\n        app_policy_reports_sub_groupid,\n        unitedeligibility,\n        policynamelocal,\n        app_mustlisttypesid,\n        downgradeapp_mustlisttypesid,\n        calc_prepaid_deduct,\n        description_local,\n        docid_nopc,\n        docid_pc,\n        fixdays,\n        mindays,\n        maxdays,\n        adddependants,\n        allowsellotherpolicies,\n        docid_haspayeeid,\n        isannual,\n        issite,\n        ispolicyrider,\n        zoneid,\n        docid_haspayeecardexpiresid,\n        isrecommended,\n        internetlink,\n        lastupdatedby,\n        saletohofonly,\n        unitedplan,\n        unitedclasscode,\n        unitedlocationno,\n        maxexposure,\n        isinternational,\n        ismedicalonly,\n        docid_tca_ceoletter,\n        docid_tca_policydetails,\n        excessversionid,\n        cancellationversionid,\n        policydisplayname,\n        producttypeid,\n        expired,\n        parentproductid\n\n    from source\n\n)\n\nselect * from renamed", "relation_name": "`dev_passportcard_travel`.`dbt_ronhaim_stg`.`stg_bronze__mrr_app_policy_groups`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-17T12:37:51.184768Z", "completed_at": "2025-02-17T12:37:51.348453Z"}, {"name": "execute", "started_at": "2025-02-17T12:37:51.355930Z", "completed_at": "2025-02-17T12:37:51.355952Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.2891983985900879, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.passportcard_travel.stg_bronze__mrr_app_policy_status", "compiled": true, "compiled_code": "with \n\nsource as (\n\n    select * from `dev_passportcard_travel`.`bronze`.`mrr_app_policy_status`\n\n),\n\nrenamed as (\n\n    select\n        statusid,\n        status,\n        status_eng,\n        cancelletterdocnum_eng,\n        cancelletterdocnum_heb,\n        isactive,\n        iscanceled,\n        datecreated,\n        policytypesid,\n        cancelletterdocnum\n\n    from source\n\n)\n\nselect * from renamed", "relation_name": "`dev_passportcard_travel`.`dbt_ronhaim_stg`.`stg_bronze__mrr_app_policy_status`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-17T12:37:51.252102Z", "completed_at": "2025-02-17T12:37:51.393141Z"}, {"name": "execute", "started_at": "2025-02-17T12:37:51.410163Z", "completed_at": "2025-02-17T12:37:51.410180Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.3122105598449707, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.passportcard_travel.stg_bronze__mrr_app_policy_types", "compiled": true, "compiled_code": "with \n\nsource as (\n\n    select * from `dev_passportcard_travel`.`bronze`.`mrr_app_policy_types`\n\n),\n\nrenamed as (\n\n    select\n        policytypeid,\n        policytype,\n        grouptype,\n        isactive,\n        createdby,\n        datecreated,\n        supplierid,\n        app_policy_types_mainid,\n        app_policy_groups_applicationtypeid,\n        masterentityid,\n        lastupdatedby,\n        lastupdated\n\n    from source\n\n)\n\nselect * from renamed", "relation_name": "`dev_passportcard_travel`.`dbt_ronhaim_stg`.`stg_bronze__mrr_app_policy_types`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-17T12:37:51.321995Z", "completed_at": "2025-02-17T12:37:51.423505Z"}, {"name": "execute", "started_at": "2025-02-17T12:37:51.436894Z", "completed_at": "2025-02-17T12:37:51.436912Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.23674416542053223, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.passportcard_travel.stg_bronze__mrr_dc_pod_agreements", "compiled": true, "compiled_code": "with \n\nsource as (\n\n    select * from `dev_passportcard_travel`.`bronze`.`mrr_dc_pod_agreements`\n\n),\n\nrenamed as (\n\n    select\n        dc_pod_agreement_id,\n        objectypeid,\n        objectid,\n        stockid,\n        archiveid,\n        fromdate,\n        todate,\n        commissioncurrencyid,\n        regcommissionpercentage,\n        regcommissionpendingfix,\n        regcommissionfix,\n        allowsale,\n        salecommissionpercentage,\n        salecommissionfix,\n        logo_path,\n        datecreated,\n        createdby,\n        dateupdated,\n        updatedby,\n        isnamed,\n        agentnumberid,\n        app_partnersid,\n        accumulate,\n        discountfixedsum,\n        discounttypeid,\n        onetimediscount,\n        discountcurrencyid\n\n    from source\n\n)\n\nselect * from renamed", "relation_name": "`dev_passportcard_travel`.`dbt_ronhaim_stg`.`stg_bronze__mrr_dc_pod_agreements`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-17T12:37:51.308310Z", "completed_at": "2025-02-17T12:37:51.473606Z"}, {"name": "execute", "started_at": "2025-02-17T12:37:51.489194Z", "completed_at": "2025-02-17T12:37:51.489215Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.28070926666259766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.passportcard_travel.stg_bronze__mrr_app_policy_types_main", "compiled": true, "compiled_code": "with \n\nsource as (\n\n    select * from `dev_passportcard_travel`.`bronze`.`mrr_app_policy_types_main`\n\n),\n\nrenamed as (\n\n    select\n        app_policy_types_mainid,\n        app_policy_types_main_name\n\n    from source\n\n)\n\nselect * from renamed", "relation_name": "`dev_passportcard_travel`.`dbt_ronhaim_stg`.`stg_bronze__mrr_app_policy_types_main`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-17T12:37:51.465678Z", "completed_at": "2025-02-17T12:37:51.578090Z"}, {"name": "execute", "started_at": "2025-02-17T12:37:51.618763Z", "completed_at": "2025-02-17T12:37:51.618781Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.26686668395996094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.passportcard_travel.stg_bronze__mrr_masterentity", "compiled": true, "compiled_code": "with \n\nsource as (\n\n    select * from `dev_passportcard_travel`.`bronze`.`mrr_masterentity`\n\n),\n\nrenamed as (\n\n    select\n        masterentityid,\n        masterentitytypeid,\n        name,\n        defaultlangid,\n        basedns,\n        createdbyid,\n        datecreated,\n        lastupdatedbyid,\n        lastupdated,\n        isactive,\n        insurancecompanyid,\n        accounttocredit,\n        accounttodebit,\n        prname,\n        fintraxfileprefixname,\n        fintraxfileheader,\n        logolinkurl,\n        fundingrequestnegativeemail,\n        eserviceseligible,\n        adulthoodagejoinedaccount,\n        adulthoodagemedconfidentiality,\n        defaultcountryoforigin,\n        fintraxcomment,\n        description,\n        appurlattgoogle,\n        appurlattapple,\n        autosendquote,\n        smssendernumber,\n        euaccountingmanagement\n\n    from source\n\n)\n\nselect * from renamed", "relation_name": "`dev_passportcard_travel`.`dbt_ronhaim_stg`.`stg_bronze__mrr_masterentity`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-17T12:37:51.551151Z", "completed_at": "2025-02-17T12:37:51.667935Z"}, {"name": "execute", "started_at": "2025-02-17T12:37:51.681727Z", "completed_at": "2025-02-17T12:37:51.681743Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.22382378578186035, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.passportcard_travel.stg_bronze__mrr_uw_exclusion_codes", "compiled": true, "compiled_code": "with \n\nsource as (\n\n    select * from `dev_passportcard_travel`.`bronze`.`mrr_uw_exclusion_codes`\n\n),\n\nrenamed as (\n\n    select\n        exclusioncodeid,\n        decisionid,\n        codetype,\n        code,\n        codetext,\n        startdate,\n        enddate,\n        ceiling,\n        uw_pct,\n        uw_sum,\n        is_risk_only,\n        notes,\n        isactive,\n        lastupdatedby,\n        lastupdated,\n        createdby,\n        datecreated\n\n    from source\n\n)\n\nselect * from renamed", "relation_name": "`dev_passportcard_travel`.`dbt_ronhaim_stg`.`stg_bronze__mrr_uw_exclusion_codes`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-17T12:37:51.604587Z", "completed_at": "2025-02-17T12:37:51.727182Z"}, {"name": "execute", "started_at": "2025-02-17T12:37:51.739949Z", "completed_at": "2025-02-17T12:37:51.739966Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.22173309326171875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.passportcard_travel.stg_bronze_mrr_app_policy_service_groups", "compiled": true, "compiled_code": "with \n\nsource as (\n\n    select * from `dev_passportcard_travel`.`bronze`.`mrr_app_policy_service_groups`\n\n),\n\nrenamed as (\n\n    SELECT \n    ServiceGroupID, \n    ServiceGroup, \n    ServiceGroupE, \n    Orderby, \n    IsMedical, \n    IsRX, \n    IsPICCLabor, \n    DC_TransactionNum, \n    DC_TransactionTimeHours, \n    DC_NeedDocumentsForClaim, \n    DC_NumberOfSignatures, \n    IsShowInExpatPrepaid, \n    IsShowInTravelPrepaid, \n    ShowInEServices, \n    DC_NumberOfSignaturesExpat, \n    DC_NeedDocumentsForClaimExpat, \n    IsDistributorPortal, \n    ServiceGroupTypeId, \n    DateCreated, \n    CreatedBy, \n    LastUpdatedBy, \n    LastUpdated, \n    IsActive\n\nFROM \n   \n    source\n\n)\n\nselect * from renamed", "relation_name": "`dev_passportcard_travel`.`dbt_ronhaim_stg`.`stg_bronze_mrr_app_policy_service_groups`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-17T12:37:51.628902Z", "completed_at": "2025-02-17T12:37:51.799754Z"}, {"name": "execute", "started_at": "2025-02-17T12:37:51.817363Z", "completed_at": "2025-02-17T12:37:51.817382Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.2926654815673828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.passportcard_travel.stg_bronze_mrr_app_policy_service_types", "compiled": true, "compiled_code": "with \n\nsource as (\n\n    select * from `dev_passportcard_travel`.`bronze`.`mrr_app_policy_service_types`\n\n),\n\nrenamed as (\n\n    SELECT \n    ServiceID, \n    ServiceGroupID, \n    ServiceE, \n    Service, \n    OldValue, \n    Procedure, \n    PriceByDeductible, \n    PriceByProportionOfSettlement, \n    IsShowInExpatPrepaid, \n    IsShowInTravelPrepaid, \n    IsActive, \n    CPTGroupRequired, \n    ShowInEServicesId, \n    DisplayAsServiceGroup\nFROM \n    source\n\n)\n\nselect * from renamed", "relation_name": "`dev_passportcard_travel`.`dbt_ronhaim_stg`.`stg_bronze_mrr_app_policy_service_types`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-17T12:37:51.754862Z", "completed_at": "2025-02-17T12:37:51.923856Z"}, {"name": "execute", "started_at": "2025-02-17T12:37:51.943767Z", "completed_at": "2025-02-17T12:37:51.943839Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.2910914421081543, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.passportcard_travel.stg_mng__mng_params", "compiled": true, "compiled_code": "with \n\nsource as (\n\n    select * from `dev_passportcard_travel`.`mng`.`mng_params`\n\n),\n\nrenamed as (\n\n    select\n        param_subject,\n        param_id,\n        param_name,\n        param_value_num,\n        param_value_str,\n        is_qda_bizchecked\n    from source\n\n)\n\nselect * from renamed", "relation_name": "`dev_passportcard_travel`.`dbt_ronhaim_stg`.`stg_mng__mng_params`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-17T12:37:51.804233Z", "completed_at": "2025-02-17T12:37:52.115094Z"}, {"name": "execute", "started_at": "2025-02-17T12:37:52.120320Z", "completed_at": "2025-02-17T12:37:52.120337Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.40538454055786133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.passportcard_travel.dim_benefits", "compiled": true, "compiled_code": "select\n    benefitid,\n    benefitname,\n    isreider,\n    startdate,\n    enddate,\n    a.benefittypeid,\n    m.benefittype,\n    m.benefittype_eng,\n    deduct_ind_innet,\n    deduct_ind_outnet,\n    isactive,\n    createdby,\n    datecreated,\n    lastupdated,\n    app_policy_types_mainid,\n    deductibles_type,\n    isr_health_fund,\n    isinternational,\n    lastupdatedby,\n    unitedeligibility,\n    null as ismedical_benefit\n    ,getdate() as dwh_date_created\n    ,getdate() as dwh_date_updated\nfrom `dev_passportcard_travel`.`dbt_ronhaim_stg`.`stg_bronze__mrr_app_policy_benefit` as a\nleft join\n    `dev_passportcard_travel`.`dbt_ronhaim_stg`.`stg_bronze__mrr_app_policy_benefit_types` as m\n    on m.benefittypeid = a.benefittypeid", "relation_name": "`dev_passportcard_travel`.`dbt_ronhaim_gold`.`dim_benefits`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-17T12:37:51.859675Z", "completed_at": "2025-02-17T12:37:52.130899Z"}, {"name": "execute", "started_at": "2025-02-17T12:37:52.141974Z", "completed_at": "2025-02-17T12:37:52.141992Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.3778879642486572, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.passportcard_travel.dim_policy_product_types", "compiled": true, "compiled_code": "SELECT IsActive\n      ,CreatedBy\n      ,DateCreated\n      ,LastUpdated\n      ,LastUpdatedBy\n      ,App_Policy_Product_TypesID\n      ,Product_Type_Name\n      ,getdate() as dwh_date_created\n      ,getdate() as dwh_date_updated\nFROM `dev_passportcard_travel`.`dbt_ronhaim_stg`.`stg_bronze__mrr_app_policy_product_types`", "relation_name": "`dev_passportcard_travel`.`dbt_ronhaim_gold`.`dim_policy_product_types`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-17T12:37:51.948549Z", "completed_at": "2025-02-17T12:37:52.134829Z"}, {"name": "execute", "started_at": "2025-02-17T12:37:52.146522Z", "completed_at": "2025-02-17T12:37:52.146540Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.29215478897094727, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.passportcard_travel.dim_policy_status", "compiled": true, "compiled_code": "SELECT IsActive\n      ,DateCreated\n      ,StatusID\n      ,Status\n      ,Status_Eng\n      ,CancelLetterDocNum_ENG\n      ,CancelLetterDocNum_HEB\n      ,IsCanceled\n      ,PolicyTypesID\n      ,CancelLetterDocNum\n      ,getdate() as dwh_date_created\n      ,getdate() as dwh_date_updated\n  FROM `dev_passportcard_travel`.`dbt_ronhaim_stg`.`stg_bronze__mrr_app_policy_status`", "relation_name": "`dev_passportcard_travel`.`dbt_ronhaim_gold`.`dim_policy_status`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-17T12:37:52.031224Z", "completed_at": "2025-02-17T12:37:52.177982Z"}, {"name": "execute", "started_at": "2025-02-17T12:37:52.211073Z", "completed_at": "2025-02-17T12:37:52.211095Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.2613646984100342, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.passportcard_travel.fact_uw_exclusion_codes", "compiled": true, "compiled_code": "with transformed_data as (\n    SELECT \n        LastUpdated,\n        LastUpdatedBy,\n        DateCreated,\n        CreatedBy,\n        Notes,\n        IsActive,\n        ExclusionCodeId,\n        DecisionID,\n        CodeType,\n        CodeText,\n        StartDate,\n        EndDate,\n        Ceiling,\n        UW_Pct,\n        UW_Sum,\n        Is_Risk_Only,\n        Code,\n        case \n            when COALESCE(a.DateCreated, '1900-01-01') > COALESCE(a.LastUpdated, '1900-01-01') \n            then a.DateCreated\n            else a.LastUpdated\n        end as latest_timestamp,  -- Take the most recent timestamp\n        getdate() as dwh_date_created\n    FROM `dev_passportcard_travel`.`dbt_ronhaim_stg`.`stg_bronze__mrr_uw_exclusion_codes` as a\n),\n\nfiltered_data as (\n    select *,\n        getdate() as dwh_date_updated \n    from transformed_data\n    \n    where latest_timestamp > (\n        select coalesce(max(latest_timestamp), '1900-01-01') \n        from `dev_passportcard_travel`.`dbt_ronhaim_gold`.`fact_uw_exclusion_codes`\n    )\n    \n)\n\nselect * \nfrom filtered_data", "relation_name": "`dev_passportcard_travel`.`dbt_ronhaim_gold`.`fact_uw_exclusion_codes`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-17T12:37:52.247005Z", "completed_at": "2025-02-17T12:37:52.433503Z"}, {"name": "execute", "started_at": "2025-02-17T12:37:52.438729Z", "completed_at": "2025-02-17T12:37:52.438755Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.29671597480773926, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.passportcard_travel.dim_services", "compiled": true, "compiled_code": "with services as (\n    select *\n    from `dev_passportcard_travel`.`dbt_ronhaim_stg`.`stg_bronze_mrr_app_policy_service_types`\n  ) , \n   servicegroups as (\n    select *\n    from `dev_passportcard_travel`.`dbt_ronhaim_stg`.`stg_bronze_mrr_app_policy_service_groups`\n  )\n\n  select  s.ServiceID\n      ,s.ServiceE AS service_name_eng\n      ,s.Service AS service_name\n     , s.ServiceGroupID\n      ,sg.ServiceGroup AS service_group_name\n      ,sg.ServiceGroupE AS service_group_name_eng\n      ,sg.IsMedical\n  from services s\n  left join servicegroups sg on s.ServiceGroupID=sg.ServiceGroupID", "relation_name": "`dev_passportcard_travel`.`dbt_ronhaim_gold`.`dim_services`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-17T12:37:52.318635Z", "completed_at": "2025-02-17T12:37:52.463813Z"}, {"name": "execute", "started_at": "2025-02-17T12:37:52.474685Z", "completed_at": "2025-02-17T12:37:52.474704Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.25718021392822266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.passportcard_travel.dim_agents", "compiled": true, "compiled_code": "WITH agents AS (\n    SELECT IsActive\n      ,CreatedBy\n      ,DateCreated\n      ,LastUpdated\n      ,LastUpdatedBy\n      ,isSentToDavidCard\n      ,Notes\n      ,AgentID\n      ,AgentParentID\n      ,AgentGroupId\n      ,AgentTypeId\n      ,InsuranceCompanyID\n      ,AgencyID\n      ,FirstName\n      ,LastName\n      ,EnglishFirstName\n      ,EnglishMiddleName\n      ,EnglishLastName\n      ,PersonalID\n      ,CustomerFileManagerId\n      ,HasAffiliateIdInSite\n      ,SalesManagerId\n      ,AgentCommissionEmail\n      ,EMailAddress\n      ,Policy_Types_MainID\n      ,AllowContactWithCustomersByDS\n    FROM `dev_passportcard_travel`.`dbt_ronhaim_stg`.`stg_bronze__mrr_agents`\n),\nparams_not_real_agent AS (\n    SELECT DISTINCT param_value_num AS agentid\n    FROM `dev_passportcard_travel`.`dbt_ronhaim_stg`.`stg_mng__mng_params`\n    WHERE param_name = 'NoRealAgent'\n),\nparams_is_natbag AS (\n    SELECT DISTINCT param_value_num AS agentid\n    FROM `dev_passportcard_travel`.`dbt_ronhaim_stg`.`stg_mng__mng_params`\n    WHERE param_name = 'Natbag'\n),\npod_agreements AS (\n    SELECT \n        objectid AS agentid, \n        MIN(datecreated) AS FirstPODAgreementDate\n    FROM `dev_passportcard_travel`.`dbt_ronhaim_stg`.`stg_bronze__mrr_dc_pod_agreements`\n    WHERE objectypeid = 5\n    GROUP BY objectid\n)\n\nSELECT \n    a.*,\n    CASE WHEN pna.agentid IS NOT NULL THEN 1 ELSE 0 END AS not_real_agent,\n    CASE WHEN pnb.agentid IS NOT NULL THEN 1 ELSE 0 END AS is_natbag,\n    pod.FirstPODAgreementDate\n    ,getdate() as dwh_date_created\n    ,getdate() as dwh_date_updated\nFROM agents a\nLEFT JOIN params_not_real_agent pna ON a.agentid = pna.agentid\nLEFT JOIN params_is_natbag pnb ON a.agentid = pnb.agentid\nLEFT JOIN pod_agreements pod ON a.agentid = pod.agentid", "relation_name": "`dev_passportcard_travel`.`dbt_ronhaim_gold`.`dim_agents`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-17T12:37:52.381177Z", "completed_at": "2025-02-17T12:37:52.649600Z"}, {"name": "execute", "started_at": "2025-02-17T12:37:52.659023Z", "completed_at": "2025-02-17T12:37:52.659054Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.3898642063140869, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.passportcard_travel.relationships_dim_benefits_benefittypeid__benefittypeid__ref_stg_bronze__mrr_app_policy_benefit_types_.bc242c94c8", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select benefittypeid as from_field\n    from `dev_passportcard_travel`.`dbt_ronhaim_gold`.`dim_benefits`\n    where benefittypeid is not null\n),\n\nparent as (\n    select benefittypeid as to_field\n    from `dev_passportcard_travel`.`dbt_ronhaim_stg`.`stg_bronze__mrr_app_policy_benefit_types`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-17T12:37:52.328467Z", "completed_at": "2025-02-17T12:37:52.651483Z"}, {"name": "execute", "started_at": "2025-02-17T12:37:52.664758Z", "completed_at": "2025-02-17T12:37:52.664778Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.4569861888885498, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.passportcard_travel.not_null_dim_benefits_benefitid.1af0793f0c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect benefitid\nfrom `dev_passportcard_travel`.`dbt_ronhaim_gold`.`dim_benefits`\nwhere benefitid is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-17T12:37:52.510632Z", "completed_at": "2025-02-17T12:37:52.652394Z"}, {"name": "execute", "started_at": "2025-02-17T12:37:52.678378Z", "completed_at": "2025-02-17T12:37:52.678395Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.24441766738891602, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.passportcard_travel.unique_dim_benefits_benefitid.84e09c8dcc", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    benefitid as unique_field,\n    count(*) as n_records\n\nfrom `dev_passportcard_travel`.`dbt_ronhaim_gold`.`dim_benefits`\nwhere benefitid is not null\ngroup by benefitid\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-17T12:37:52.546322Z", "completed_at": "2025-02-17T12:37:52.698411Z"}, {"name": "execute", "started_at": "2025-02-17T12:37:52.715604Z", "completed_at": "2025-02-17T12:37:52.715618Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.2801187038421631, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.passportcard_travel.dim_policy_groups", "compiled": true, "compiled_code": "WITH master_entities AS (\n    SELECT DISTINCT param_value_num AS MasterEntityId\n    FROM `dev_passportcard_travel`.`dbt_ronhaim_stg`.`stg_mng__mng_params`\n    WHERE param_subject = 'PC' AND param_name = 'pc_master_entity'\n),\n\nfree_policies AS (\n    SELECT param_value_num AS IdPolicy, 1 AS IsFreePolicy\n    FROM `dev_passportcard_travel`.`dbt_ronhaim_stg`.`stg_mng__mng_params`\n    WHERE param_name = 'free_policy'\n),\n\npolicy_types AS (\n    SELECT PolicyTypeId, MasterEntityId, App_Policy_Types_MainID, PolicyType\n    FROM `dev_passportcard_travel`.`dbt_ronhaim_stg`.`stg_bronze__mrr_app_policy_types`\n),\n\npolicy_types_main AS (\n    SELECT App_Policy_Types_MainID, App_Policy_Types_Main_Name\n    FROM `dev_passportcard_travel`.`dbt_ronhaim_stg`.`stg_bronze__mrr_app_policy_types_main`\n),\n\nmaster_entity AS (\n    SELECT masterentityid, name AS masterentity_name\n    FROM `dev_passportcard_travel`.`dbt_ronhaim_stg`.`stg_bronze__mrr_masterentity`\n),\n\npolicy_product_types AS (\n    SELECT App_Policy_Product_TypesID, Product_Type_Name\n    FROM `dev_passportcard_travel`.`dbt_ronhaim_gold`.`dim_policy_product_types`\n),\n\npolicy_groups AS (\n    SELECT *\n    FROM `dev_passportcard_travel`.`dbt_ronhaim_stg`.`stg_bronze__mrr_app_policy_groups`\n)\n\nSELECT \n    pg.IdPolicy,\n    pg.StartDate,\n    pg.EndDate,\n    pg.IsActive,\n    pg.CreatedBy,\n    pg.DateCreated,\n    pg.LastUpdatedBy,\n    pg.PolicyTypeId,\n    pg.PolicyName,\n    status AS is_enabled,\n    pg.LastUpdate,\n    pg.App_Policy_Reports_GroupID,\n    pg.App_Policy_Reports_Sub_GroupID,\n    pg.PolicyNameLocal,\n    pg.FixDays,\n    pg.MinDays,\n    pg.MaxDays,\n    pg.AllowSellOtherPolicies,\n    pg.IsAnnual,\n    pg.IsSite,\n    pg.IsPolicyRider,\n    pt.PolicyType,\n    pt.MasterEntityId,\n    ptm.App_Policy_Types_Main_Name,\n    me.masterentity_name,\n    COALESCE(fp.IsFreePolicy, 0) AS IsFreePolicy,\n    pg.AddDependants,\n    ppt.App_Policy_Product_TypesID,\n    ppt.Product_Type_Name,\n    GETDATE() AS dwh_date_created,\n    GETDATE() AS dwh_date_updated\nFROM policy_groups AS pg\nLEFT JOIN policy_types AS pt \n    ON pt.PolicyTypeId = pg.PolicyTypeId\nLEFT JOIN policy_types_main AS ptm \n    ON ptm.App_Policy_Types_MainID = pt.App_Policy_Types_MainID\nLEFT JOIN master_entity AS me \n    ON me.masterentityid = pt.MasterEntityId\nLEFT JOIN free_policies AS fp \n    ON fp.IdPolicy = pg.IdPolicy\nLEFT JOIN policy_product_types AS ppt \n    ON ppt.App_Policy_Product_TypesID = pg.ProductTypeID\nWHERE pt.MasterEntityId IN (SELECT MasterEntityId FROM master_entities)\n\n\n\n/*\nWITH master_entities AS (\n    SELECT DISTINCT param_value_num AS MasterEntityId\n    FROM `dev_passportcard_travel`.`dbt_ronhaim_stg`.`stg_mng__mng_params`\n    WHERE param_subject = 'PC' AND param_name = 'pc_master_entity'\n),\n\nfree_policies AS (\n    SELECT param_value_num AS IdPolicy, \n           1 AS IsFreePolicy\n    FROM `dev_passportcard_travel`.`dbt_ronhaim_stg`.`stg_mng__mng_params`\n    WHERE param_name = 'free_policy'\n)\n\nSELECT \n    mapg.IdPolicy,\n    mapg.StartDate,\n    mapg.EndDate,\n    mapg.IsActive,\n    mapg.CreatedBy,\n    mapg.DateCreated,\n    mapg.LastUpdatedBy,\n    mapg.PolicyTypeId,\n    mapg.PolicyName,\n    status AS is_enabled,\n    mapg.LastUpdate,\n    mapg.App_Policy_Reports_GroupID,\n    mapg.App_Policy_Reports_Sub_GroupID,\n    mapg.PolicyNameLocal,\n    mapg.FixDays,\n    mapg.MinDays,\n    mapg.MaxDays,\n    mapg.AllowSellOtherPolicies,\n    mapg.IsAnnual,\n    mapg.IsSite,\n    mapg.IsPolicyRider,\n    mapt.PolicyType,\n    mapt.MasterEntityId,\n    mapt.App_Policy_Types_MainID,\n    mp.App_Policy_Types_Main_Name,\n    me.name AS masterentity_name,\n    COALESCE(fp.IsFreePolicy, 0) AS IsFreePolicy,\n    mapg.AddDependants,\n    dpt.App_Policy_Product_TypesID,\n    dpt.Product_Type_Name,\n    GETDATE() AS dwh_date_created,\n    GETDATE() AS dwh_date_updated\nFROM `dev_passportcard_travel`.`dbt_ronhaim_stg`.`stg_bronze__mrr_app_policy_groups` AS mapg\nLEFT JOIN `dev_passportcard_travel`.`dbt_ronhaim_stg`.`stg_bronze__mrr_app_policy_types` AS mapt \n    ON mapt.PolicyTypeId = mapg.PolicyTypeId\nLEFT JOIN `dev_passportcard_travel`.`dbt_ronhaim_stg`.`stg_bronze__mrr_app_policy_types_main` AS mp \n    ON mp.App_Policy_Types_MainID = mapt.App_Policy_Types_MainID\nLEFT JOIN `dev_passportcard_travel`.`dbt_ronhaim_stg`.`stg_bronze__mrr_masterentity` AS me \n    ON me.masterentityid = mapt.masterentityid\nLEFT JOIN free_policies AS fp \n    ON fp.IdPolicy = mapg.IdPolicy\nLEFT JOIN `dev_passportcard_travel`.`dbt_ronhaim_gold`.`dim_policy_product_types` AS dpt \n    ON dpt.App_Policy_Product_TypesID = mapg.ProductTypeID\nWHERE mapt.MasterEntityId IN (SELECT MasterEntityId FROM master_entities)\n*/", "relation_name": "`dev_passportcard_travel`.`dbt_ronhaim_gold`.`dim_policy_groups`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-17T12:37:52.840528Z", "completed_at": "2025-02-17T12:37:53.033602Z"}, {"name": "execute", "started_at": "2025-02-17T12:37:53.038271Z", "completed_at": "2025-02-17T12:37:53.038288Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.3175053596496582, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.passportcard_travel.not_null_dim_policy_product_types_App_Policy_Product_TypesID.1e903e4cdb", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect App_Policy_Product_TypesID\nfrom `dev_passportcard_travel`.`dbt_ronhaim_gold`.`dim_policy_product_types`\nwhere App_Policy_Product_TypesID is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-17T12:37:52.859226Z", "completed_at": "2025-02-17T12:37:53.063342Z"}, {"name": "execute", "started_at": "2025-02-17T12:37:53.088136Z", "completed_at": "2025-02-17T12:37:53.088149Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.38732004165649414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.passportcard_travel.unique_dim_policy_product_types_App_Policy_Product_TypesID.e6bca4925d", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    App_Policy_Product_TypesID as unique_field,\n    count(*) as n_records\n\nfrom `dev_passportcard_travel`.`dbt_ronhaim_gold`.`dim_policy_product_types`\nwhere App_Policy_Product_TypesID is not null\ngroup by App_Policy_Product_TypesID\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-17T12:37:52.883025Z", "completed_at": "2025-02-17T12:37:53.085173Z"}, {"name": "execute", "started_at": "2025-02-17T12:37:53.111504Z", "completed_at": "2025-02-17T12:37:53.111526Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.40584492683410645, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.passportcard_travel.not_null_dim_policy_status_StatusID.24380c853c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect StatusID\nfrom `dev_passportcard_travel`.`dbt_ronhaim_gold`.`dim_policy_status`\nwhere StatusID is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-17T12:37:52.926174Z", "completed_at": "2025-02-17T12:37:53.079486Z"}, {"name": "execute", "started_at": "2025-02-17T12:37:53.092558Z", "completed_at": "2025-02-17T12:37:53.092572Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.32006311416625977, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.passportcard_travel.unique_dim_policy_status_StatusID.73712bbf65", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    StatusID as unique_field,\n    count(*) as n_records\n\nfrom `dev_passportcard_travel`.`dbt_ronhaim_gold`.`dim_policy_status`\nwhere StatusID is not null\ngroup by StatusID\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-17T12:37:53.158381Z", "completed_at": "2025-02-17T12:37:53.368923Z"}, {"name": "execute", "started_at": "2025-02-17T12:37:53.374363Z", "completed_at": "2025-02-17T12:37:53.374386Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.33216190338134766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.passportcard_travel.not_null_fact_uw_exclusion_codes_ExclusionCodeId.abfdd954a8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ExclusionCodeId\nfrom `dev_passportcard_travel`.`dbt_ronhaim_gold`.`fact_uw_exclusion_codes`\nwhere ExclusionCodeId is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-17T12:37:53.263301Z", "completed_at": "2025-02-17T12:37:53.388561Z"}, {"name": "execute", "started_at": "2025-02-17T12:37:53.397369Z", "completed_at": "2025-02-17T12:37:53.397395Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.28284287452697754, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.passportcard_travel.unique_fact_uw_exclusion_codes_ExclusionCodeId.05cc715057", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    ExclusionCodeId as unique_field,\n    count(*) as n_records\n\nfrom `dev_passportcard_travel`.`dbt_ronhaim_gold`.`fact_uw_exclusion_codes`\nwhere ExclusionCodeId is not null\ngroup by ExclusionCodeId\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-17T12:37:53.308923Z", "completed_at": "2025-02-17T12:37:53.470243Z"}, {"name": "execute", "started_at": "2025-02-17T12:37:53.490390Z", "completed_at": "2025-02-17T12:37:53.490409Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.3337268829345703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.passportcard_travel.not_null_dim_services_serviceid.c1944d0b78", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect serviceid\nfrom `dev_passportcard_travel`.`dbt_ronhaim_gold`.`dim_services`\nwhere serviceid is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-17T12:37:53.298287Z", "completed_at": "2025-02-17T12:37:53.470957Z"}, {"name": "execute", "started_at": "2025-02-17T12:37:53.495628Z", "completed_at": "2025-02-17T12:37:53.495653Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.3201296329498291, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.passportcard_travel.unique_dim_services_serviceid.5ae6d79864", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    serviceid as unique_field,\n    count(*) as n_records\n\nfrom `dev_passportcard_travel`.`dbt_ronhaim_gold`.`dim_services`\nwhere serviceid is not null\ngroup by serviceid\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-17T12:37:53.530850Z", "completed_at": "2025-02-17T12:37:53.736494Z"}, {"name": "execute", "started_at": "2025-02-17T12:37:53.746144Z", "completed_at": "2025-02-17T12:37:53.746166Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.3285040855407715, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.passportcard_travel.accepted_values_dim_agents_not_real_agent__0__1.c81bd96e65", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        not_real_agent as value_field,\n        count(*) as n_records\n\n    from `dev_passportcard_travel`.`dbt_ronhaim_gold`.`dim_agents`\n    group by not_real_agent\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    '0','1'\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-17T12:37:53.551794Z", "completed_at": "2025-02-17T12:37:53.741376Z"}, {"name": "execute", "started_at": "2025-02-17T12:37:53.754617Z", "completed_at": "2025-02-17T12:37:53.754638Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.3530101776123047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.passportcard_travel.accepted_values_dim_agents_is_natbag__0__1.e5b8f34ede", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        is_natbag as value_field,\n        count(*) as n_records\n\n    from `dev_passportcard_travel`.`dbt_ronhaim_gold`.`dim_agents`\n    group by is_natbag\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    '0','1'\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-17T12:37:53.670318Z", "completed_at": "2025-02-17T12:37:53.785851Z"}, {"name": "execute", "started_at": "2025-02-17T12:37:53.799817Z", "completed_at": "2025-02-17T12:37:53.799835Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.23601055145263672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.passportcard_travel.unique_dim_agents_agentid.6b58e5ff25", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    agentid as unique_field,\n    count(*) as n_records\n\nfrom `dev_passportcard_travel`.`dbt_ronhaim_gold`.`dim_agents`\nwhere agentid is not null\ngroup by agentid\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-17T12:37:53.694431Z", "completed_at": "2025-02-17T12:37:53.793119Z"}, {"name": "execute", "started_at": "2025-02-17T12:37:53.807816Z", "completed_at": "2025-02-17T12:37:53.807833Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.2209453582763672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.passportcard_travel.not_null_dim_agents_agentid.042256bf06", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect agentid\nfrom `dev_passportcard_travel`.`dbt_ronhaim_gold`.`dim_agents`\nwhere agentid is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-17T12:37:53.892296Z", "completed_at": "2025-02-17T12:37:54.016674Z"}, {"name": "execute", "started_at": "2025-02-17T12:37:54.024227Z", "completed_at": "2025-02-17T12:37:54.024243Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.2508273124694824, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.passportcard_travel.fact_policies", "compiled": true, "compiled_code": "with transformed_data as (\n    SELECT PolicyID\n        ,CustomerID\n        ,ParentID\n        ,IdPolicy\n        ,PolicyNumber\n        ,MemberID\n        ,Member_ID\n        ,StatusID\n        ,PolicyStartDate\n        ,PolicyEndDate\n        ,ContinuityDate\n        ,PremiumEndDate\n        ,CancelDate\n        ,DecisionID\n        ,QuoteID\n        ,App_Medical_CustomerID\n        ,Pending_Status\n        ,a.LastUpdated\n        ,a.LastUpdatedBy\n        ,a.DateCreated\n        ,a.CreatedBy\n        ,companyId\n        ,PurposeID\n        ,Days\n        ,SaleBy\n        ,App_Policy_OwnerID\n        ,CompanyAgreementsID\n        ,TravelPolicyNumber\n        ,DC_POD_CompanyAgreementsID\n        ,AssociationID\n        ,CountryOfOriginID\n        ,CustomerApproved\n        ,CustomerApprovedDetailsDate\n        case \n            when COALESCE(a.DateCreated, '1900-01-01') > COALESCE(a.LastUpdated, '1900-01-01') \n            then a.DateCreated\n            else a.LastUpdated\n        end as latest_timestamp,  -- Take the most recent timestamp\n        ,getdate() as dwh_date_created\n    from `dev_passportcard_travel`.`dbt_ronhaim_stg`.`stg_bronze__mrr_app_policy` as a\n    join `dev_passportcard_travel`.`dbt_ronhaim_gold`.`dim_policy_groups` as dpg using (IdPolicy)\n),\n\nfiltered_data as (\n    select *,\n        getdate() as dwh_date_updated\n    from transformed_data\n    \n    where latest_timestamp > (\n        select coalesce(max(latest_timestamp), '1900-01-01') \n        from `dev_passportcard_travel`.`dbt_ronhaim_gold`.`fact_policies`\n    )\n    \n)\n\nselect *\nfrom filtered_data", "relation_name": "`dev_passportcard_travel`.`dbt_ronhaim_gold`.`fact_policies`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-17T12:37:53.908631Z", "completed_at": "2025-02-17T12:37:54.020364Z"}, {"name": "execute", "started_at": "2025-02-17T12:37:54.028435Z", "completed_at": "2025-02-17T12:37:54.028461Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.24994111061096191, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.passportcard_travel.fact_policy_coverage", "compiled": true, "compiled_code": "with transformed_data as (\n    SELECT a.PolicyID\n        ,a.IdPolicy\n        ,ContinuityDate\n        ,PremiumEndDate\n        ,CancelDate\n        ,a.LastUpdated\n        ,a.LastUpdatedBy\n        ,a.DateCreated\n        ,a.CreatedBy\n        ,CoverageId\n        ,BenefitId\n        ,IsRider\n        ,Units\n        ,PriceID\n        ,DecisionId\n        ,StatusId\n        ,Cov_Start_Date\n        ,Cov_End_Date\n        ,a.LastUpdate\n        ,PaymentID\n        ,Payer_ObjectType\n        ,Payer_ObjectID\n        ,Notes\n        ,FixPrice\n        ,needPayment2\n        ,Payment1Pct\n        ,PaymentID2\n        ,PaymentIncUw\n        ,RiskGroupID\n        ,IsPeriodicRider\n        ,case \n            when COALESCE(a.DateCreated, '1900-01-01') > COALESCE(a.LastUpdated, '1900-01-01') \n            then a.DateCreated\n            else a.LastUpdated\n        end as latest_timestamp,  -- Take the most recent timestamp\n        ,getdate() as dwh_date_created\n        FROM `dev_passportcard_travel`.`dbt_ronhaim_stg`.`stg_bronze__mrr_app_policy_coverage` as a\n        join `dev_passportcard_travel`.`dbt_ronhaim_gold`.`dim_policy_groups` as dpg using (IdPolicy)\n),\n\nfiltered_data as (\n    select *,\n        getdate() as dwh_date_updated\n    from transformed_data\n    \n    where latest_timestamp > (\n        select coalesce(max(latest_timestamp), '1900-01-01') \n        from `dev_passportcard_travel`.`dbt_ronhaim_gold`.`fact_policy_coverage`\n    )\n    \n)\n\nselect *\nfrom filtered_data", "relation_name": "`dev_passportcard_travel`.`dbt_ronhaim_gold`.`fact_policy_coverage`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-17T12:37:53.981056Z", "completed_at": "2025-02-17T12:37:54.157134Z"}, {"name": "execute", "started_at": "2025-02-17T12:37:54.172089Z", "completed_at": "2025-02-17T12:37:54.172109Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.30444765090942383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.passportcard_travel.not_null_dim_policy_groups_IdPolicy.0333bf0d19", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect IdPolicy\nfrom `dev_passportcard_travel`.`dbt_ronhaim_gold`.`dim_policy_groups`\nwhere IdPolicy is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-17T12:37:53.992651Z", "completed_at": "2025-02-17T12:37:54.155660Z"}, {"name": "execute", "started_at": "2025-02-17T12:37:54.166279Z", "completed_at": "2025-02-17T12:37:54.166301Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.2855980396270752, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.passportcard_travel.unique_dim_policy_groups_IdPolicy.933b083935", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    IdPolicy as unique_field,\n    count(*) as n_records\n\nfrom `dev_passportcard_travel`.`dbt_ronhaim_gold`.`dim_policy_groups`\nwhere IdPolicy is not null\ngroup by IdPolicy\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-17T12:37:54.121389Z", "completed_at": "2025-02-17T12:37:54.293249Z"}, {"name": "execute", "started_at": "2025-02-17T12:37:54.321118Z", "completed_at": "2025-02-17T12:37:54.321139Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.2874579429626465, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.passportcard_travel.not_null_fact_policies_PolicyID.97d2b24a83", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect PolicyID\nfrom `dev_passportcard_travel`.`dbt_ronhaim_gold`.`fact_policies`\nwhere PolicyID is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-17T12:37:54.132050Z", "completed_at": "2025-02-17T12:37:54.297115Z"}, {"name": "execute", "started_at": "2025-02-17T12:37:54.329978Z", "completed_at": "2025-02-17T12:37:54.330014Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.2808973789215088, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.passportcard_travel.relationships_fact_policies_IdPolicy__IdPolicy__ref_dim_policy_groups_.d32aa23908", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select IdPolicy as from_field\n    from `dev_passportcard_travel`.`dbt_ronhaim_gold`.`fact_policies`\n    where IdPolicy is not null\n),\n\nparent as (\n    select IdPolicy as to_field\n    from `dev_passportcard_travel`.`dbt_ronhaim_gold`.`dim_policy_groups`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-17T12:37:54.279137Z", "completed_at": "2025-02-17T12:37:54.406860Z"}, {"name": "execute", "started_at": "2025-02-17T12:37:54.426084Z", "completed_at": "2025-02-17T12:37:54.426100Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.25588345527648926, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.passportcard_travel.fact_policy_discount", "compiled": true, "compiled_code": "with transformed_data as (\n    SELECT mapd.DiscountId\n        ,mapd.DiscountTypeid\n        ,mapd.CoverageId\n        ,mapd.LastUpdated\n        ,mapd.LastUpdatedBy\n        ,mapd.DateCreated\n        ,mapd.CreatedBy\n        ,mapd.Notes\n        ,mapd.FromDate\n        ,mapd.UntilDate\n        ,mapd.Pct\n        ,mapd.Sum\n        ,mapd.Periods\n        ,mapd.IsActive\n        ,mapd.DateApproved\n        ,mapd.DeleteDecisionBy\n        ,mapd.DeleteDecisionDate\n        ,mapd.DeleteRequestBy\n        ,mapd.DeletionState\n        ,mapd.CaseId\n        ,mapd.ApprovedBy\n        ,case \n            when mapd.DateCreated > mapd.LastUpdated then mapd.DateCreated\n            else mapd.LastUpdated\n        end as latest_timestamp  -- Take the most recent timestamp\n        ,getdate() as dwh_date_created\n    FROM `dev_passportcard_travel`.`dbt_ronhaim_stg`.`stg_bronze__mrr_app_policy_discount` AS mapd\n    join `dev_passportcard_travel`.`dbt_ronhaim_gold`.`fact_policy_coverage` as fpc using (CoverageId)\n    WHERE fpc.CoverageId = mapd.CoverageId\n),\n\nfiltered_data as (\n    select *,\n        getdate() as dwh_date_updated\n    from transformed_data\n    \n    where latest_timestamp > (\n        select coalesce(max(latest_timestamp), '1900-01-01') \n        from `dev_passportcard_travel`.`dbt_ronhaim_gold`.`fact_policy_discount`\n    )\n    \n)\n\nselect *\nfrom filtered_data", "relation_name": "`dev_passportcard_travel`.`dbt_ronhaim_gold`.`fact_policy_discount`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-17T12:37:54.263678Z", "completed_at": "2025-02-17T12:37:54.422570Z"}, {"name": "execute", "started_at": "2025-02-17T12:37:54.451623Z", "completed_at": "2025-02-17T12:37:54.451639Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.27301621437072754, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.passportcard_travel.unique_fact_policies_PolicyID.c4cbd07d7a", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    PolicyID as unique_field,\n    count(*) as n_records\n\nfrom `dev_passportcard_travel`.`dbt_ronhaim_gold`.`fact_policies`\nwhere PolicyID is not null\ngroup by PolicyID\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-17T12:37:54.410766Z", "completed_at": "2025-02-17T12:37:54.617678Z"}, {"name": "execute", "started_at": "2025-02-17T12:37:54.627842Z", "completed_at": "2025-02-17T12:37:54.627862Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.2903459072113037, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.passportcard_travel.not_null_fact_policy_coverage_CoverageId.c8d4d860a1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect CoverageId\nfrom `dev_passportcard_travel`.`dbt_ronhaim_gold`.`fact_policy_coverage`\nwhere CoverageId is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-17T12:37:54.436710Z", "completed_at": "2025-02-17T12:37:54.616644Z"}, {"name": "execute", "started_at": "2025-02-17T12:37:54.622891Z", "completed_at": "2025-02-17T12:37:54.622908Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.29020142555236816, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.passportcard_travel.unique_fact_policy_coverage_CoverageId.e589cfeed9", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    CoverageId as unique_field,\n    count(*) as n_records\n\nfrom `dev_passportcard_travel`.`dbt_ronhaim_gold`.`fact_policy_coverage`\nwhere CoverageId is not null\ngroup by CoverageId\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-17T12:37:54.557646Z", "completed_at": "2025-02-17T12:37:54.673005Z"}, {"name": "execute", "started_at": "2025-02-17T12:37:54.683508Z", "completed_at": "2025-02-17T12:37:54.683525Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.1997373104095459, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.passportcard_travel.fact_premiums", "compiled": true, "compiled_code": "WITH policy_coverage AS (\n    SELECT * FROM `dev_passportcard_travel`.`dbt_ronhaim_gold`.`fact_policy_coverage`\n),\n\npolicies AS (\n    SELECT * FROM `dev_passportcard_travel`.`dbt_ronhaim_gold`.`fact_policies`\n),\n\npolicy_status AS (\n    SELECT * FROM `dev_passportcard_travel`.`dbt_ronhaim_gold`.`dim_policy_status`\n),\n\npolicy_groups AS (\n    SELECT * FROM `dev_passportcard_travel`.`dbt_ronhaim_gold`.`dim_policy_groups`\n),\n\nbenefits AS (\n    SELECT * FROM `dev_passportcard_travel`.`dbt_ronhaim_gold`.`dim_benefits`\n),\n\npolicy_discount AS (\n    SELECT CoverageId, SUM(Pct) AS pct\n    FROM `dev_passportcard_travel`.`dbt_ronhaim_gold`.`fact_policy_discount`\n    WHERE CAST(IsActive AS INT) = 1\n    GROUP BY CoverageId\n),\n\npolicy_discount_updated AS (\n    SELECT CoverageId\n    FROM `dev_passportcard_travel`.`dbt_ronhaim_gold`.`fact_policy_discount`\n    WHERE LastUpdated IS NOT NULL\n),\n\nuw_exclusion_codes AS (\n    SELECT last_uw.DecisionID, last_uw.ExclusionCodeId, last_uw.UW_Pct, last_uw.LastUpdated\n    FROM (\n        SELECT fuec2.DecisionID, fuec2.ExclusionCodeId, fuec2.UW_Pct, fuec2.LastUpdated,\n               RANK() OVER (PARTITION BY fuec2.DecisionID ORDER BY COALESCE(fuec2.LastUpdated, fuec2.DateCreated) DESC) AS rnk\n        FROM `dev_passportcard_travel`.`dbt_ronhaim_gold`.`fact_uw_exclusion_codes` fuec2\n        WHERE CAST(fuec2.IsActive AS INT) = 1\n    ) AS last_uw\n    WHERE last_uw.rnk = 1\n),\n\nparams AS (\n    SELECT * \n    FROM `dev_passportcard_travel`.`dbt_ronhaim_stg`.`stg_mng__mng_params`\n    where param_subject = 'BenefitBand'\n)\n\nSELECT DISTINCT \n    fpc.PolicyID,\n    fp.Member_ID,\n    fp.TravelPolicyNumber,\n    fp.PolicyStartDate,\n    fp.PolicyEndDate,\n    fp.StatusID AS policy_status_id,\n    pp.Status_Eng AS policy_status_name,\n    fpc.IsPeriodicRider,\n    fpc.IdPolicy,\n    dpg.PolicyName,\n    dpg.IsAnnual,\n    fpc.CoverageId,\n    fpc.BenefitId,\n    db.BenefitName,\n    CASE \n        WHEN CAST(db.IsReider AS INT) = 0 OR mp.param_name = 'Base' THEN 'Base Plan' \n        ELSE db.BenefitName \n    END AS calc_benefit_type,\n\n    fpc.Cov_Start_Date,\n    fpc.Cov_End_Date,\n    fpc.StatusId AS coverage_status_id,\n    maps.Status_Eng AS coverage_status_name,\n\n    CASE \n        WHEN CAST(dpg.IsPolicyRider AS INT) = 1 THEN 0\n        ELSE 1\n    END *\n    CASE \n        WHEN CAST(db.IsReider AS INT) = 1 THEN 0\n        ELSE 1\n    END *\n    CASE \n        WHEN CAST(dpg.IsAnnual AS INT) = 1 THEN 60.000 / 365.000\n        ELSE 1\n    END *\n    (\n        CASE \n            WHEN DATEDIFF(DAY, fpc.Cov_Start_Date, fpc.Cov_End_Date) + 1 <= 0 THEN 1\n            ELSE DATEDIFF(DAY, fpc.Cov_Start_Date, fpc.Cov_End_Date) + 1\n        END\n    ) AS base_days,\n\n    CASE \n        WHEN CAST(db.IsReider AS INT) = 1 AND mp.param_name <> 'Base' THEN 1\n        ELSE 0\n    END *\n    CASE \n        WHEN CAST(dpg.IsAnnual AS INT) = 1 THEN 60.000 / 365.000\n        ELSE 1\n    END *\n    (\n        CASE \n            WHEN DATEDIFF(DAY, fpc.Cov_Start_Date, fpc.Cov_End_Date) + 1 <= 0 THEN 1\n            ELSE DATEDIFF(DAY, fpc.Cov_Start_Date, fpc.Cov_End_Date) + 1\n        END\n    ) AS rider_days,\n\n    CASE \n        WHEN CAST(db.IsReider AS INT) = 0 OR mp.param_name = 'Base' \n            AND (CAST(fpc.IsPeriodicRider AS INT) = 0 OR fpc.IsPeriodicRider IS NULL) \n        THEN fpc.FixPrice \n        ELSE 0\n    END AS base_premium_before_discount,\n\n    CASE \n        WHEN (CAST(db.IsReider AS INT) = 1 AND mp.param_name <> 'Base') OR CAST(fpc.IsPeriodicRider AS INT) = 1 \n        THEN fpc.FixPrice \n        ELSE 0\n    END AS rider_premium_before_discount,\n\n    fpc.FixPrice * COALESCE(fpd.pct, 0) / 100 AS discount_premium,\n\n    (\n        CASE \n            WHEN (CAST(db.IsReider AS INT) = 0 OR mp.param_name = 'Base') \n                AND (CAST(fpc.IsPeriodicRider AS INT) = 0 OR fpc.IsPeriodicRider IS NULL)  \n            THEN fpc.FixPrice \n            ELSE 0\n        END\n    ) * (1 - (COALESCE(fpd.pct, 0) / 100)) AS base_premium_after_discount,\n\n    (\n        CASE \n            WHEN (CAST(db.IsReider AS INT) = 1 AND mp.param_name <> 'Base') OR CAST(fpc.IsPeriodicRider AS INT) = 1 \n            THEN fpc.FixPrice \n            ELSE 0\n        END\n    ) * (1 - (COALESCE(fpd.pct, 0) / 100)) AS rider_premium_after_discount,\n\n    CASE \n        WHEN CAST(fpc.IsRider AS INT) <> 1 \n        THEN fpc.FixPrice * COALESCE(unique_uw.UW_Pct, 0) / 100 \n        ELSE 0\n    END AS uw_premium,\n\n    GETDATE() AS dwh_created_date,\n    GETDATE() AS dwh_updated_date\n\nFROM policy_coverage AS fpc\nLEFT JOIN policies AS fp \n    ON fp.PolicyID = fpc.PolicyID\nLEFT JOIN policy_status AS pp \n    ON pp.StatusID = fp.StatusID\nLEFT JOIN policy_groups AS dpg \n    ON dpg.IdPolicy = fp.IdPolicy\nLEFT JOIN benefits AS db \n    ON db.BenefitId = fpc.BenefitId\nLEFT JOIN params AS mp \n    ON db.BenefitId = mp.param_value_num\nLEFT JOIN policy_status AS maps \n    ON maps.StatusId = fpc.StatusId\nLEFT JOIN policy_discount AS fpd \n    ON fpd.CoverageId = fpc.CoverageId\nLEFT JOIN policy_discount_updated AS fpd3 \n    ON fpd.CoverageId = fpd3.CoverageId\nLEFT JOIN uw_exclusion_codes AS unique_uw \n    ON unique_uw.DecisionId = fpc.DecisionId", "relation_name": "`dev_passportcard_travel`.`dbt_ronhaim_gold`.`fact_premiums`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-17T12:37:54.570491Z", "completed_at": "2025-02-17T12:37:54.745749Z"}, {"name": "execute", "started_at": "2025-02-17T12:37:54.770390Z", "completed_at": "2025-02-17T12:37:54.770410Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.30887889862060547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.passportcard_travel.not_null_fact_policy_discount_DiscountId.029aaaf46b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect DiscountId\nfrom `dev_passportcard_travel`.`dbt_ronhaim_gold`.`fact_policy_discount`\nwhere DiscountId is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-17T12:37:54.728789Z", "completed_at": "2025-02-17T12:37:54.872265Z"}, {"name": "execute", "started_at": "2025-02-17T12:37:54.879436Z", "completed_at": "2025-02-17T12:37:54.879480Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.23656964302062988, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.passportcard_travel.unique_fact_policy_discount_DiscountId.06dc2dcca7", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    DiscountId as unique_field,\n    count(*) as n_records\n\nfrom `dev_passportcard_travel`.`dbt_ronhaim_gold`.`fact_policy_discount`\nwhere DiscountId is not null\ngroup by DiscountId\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-17T12:37:54.832389Z", "completed_at": "2025-02-17T12:37:54.999478Z"}, {"name": "execute", "started_at": "2025-02-17T12:37:55.008701Z", "completed_at": "2025-02-17T12:37:55.008722Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.3041961193084717, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.passportcard_travel.agg_premium_by_member", "compiled": true, "compiled_code": "WITH cancelled_status AS (\n    SELECT DISTINCT param_value_num AS cancelled_status\n    FROM `dev_passportcard_travel`.`dbt_ronhaim_stg`.`stg_mng__mng_params`\n    WHERE param_name = 'policy_cancelled_status'\n),\n\nfiltered_premiums AS (\n    SELECT *\n    FROM `dev_passportcard_travel`.`dbt_ronhaim_gold`.`fact_premiums`\n    WHERE policy_status_id NOT IN (SELECT cancelled_status FROM cancelled_status)\n    AND coverage_status_id NOT IN (SELECT cancelled_status FROM cancelled_status)\n\n    \n)\n\nSELECT \n    fp.PolicyID, \n    fp.Member_ID, \n    fp.TravelPolicyNumber, \n    fp.PolicyStartDate, \n    fp.PolicyEndDate, \n    fp.IdPolicy, \n    fp.PolicyName, \n    fp.IsAnnual,\n    \n    SUM(fp.base_days) AS total_base_days, \n    SUM(fp.base_premium_before_discount) AS total_base_premium_before_discount,\n    SUM(fp.rider_premium_before_discount) AS total_rider_premium_before_discount, \n    SUM(fp.discount_premium) AS total_discount_premium, \n    SUM(fp.base_premium_after_discount) AS total_base_premium_after_discount, \n    SUM(fp.rider_premium_after_discount) AS total_rider_premium_after_discount,\n    SUM(fp.uw_premium) AS total_uw_premium,\n\n    -- Total premium calculation\n    SUM(fp.base_premium_after_discount + fp.uw_premium + fp.rider_premium_after_discount) AS total_premium,\n\n    -- US-specific premium\n    SUM(CASE WHEN fp.BenefitName LIKE '%\u05d0\u05e8\u05d4%' THEN fp.base_premium_after_discount ELSE 0 END) AS total_us_premium_after_discount,\n\n    GETDATE() AS dwh_created_date,\n    GETDATE() AS dwh_updated_date\n\nFROM filtered_premiums AS fp\n\nGROUP BY \n    fp.PolicyID, fp.Member_ID, fp.TravelPolicyNumber, fp.PolicyStartDate, \n    fp.PolicyEndDate, fp.IdPolicy, fp.PolicyName, fp.IsAnnual\n\nORDER BY \n    fp.PolicyID, fp.Member_ID, fp.TravelPolicyNumber, fp.PolicyStartDate, \n    fp.PolicyEndDate, fp.IdPolicy, fp.PolicyName, fp.IsAnnual\n\n--OPTION (USE HINT ('FORCE_LEGACY_CARDINALITY_ESTIMATION'));", "relation_name": "`dev_passportcard_travel`.`dbt_ronhaim_gold`.`agg_premium_by_member`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-17T12:37:54.819767Z", "completed_at": "2025-02-17T12:37:55.019947Z"}, {"name": "execute", "started_at": "2025-02-17T12:37:55.046937Z", "completed_at": "2025-02-17T12:37:55.046959Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.3827817440032959, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.passportcard_travel.not_null_fact_premiums_CoverageId.752737c1aa", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect CoverageId\nfrom `dev_passportcard_travel`.`dbt_ronhaim_gold`.`fact_premiums`\nwhere CoverageId is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-17T12:37:54.905178Z", "completed_at": "2025-02-17T12:37:55.023639Z"}, {"name": "execute", "started_at": "2025-02-17T12:37:55.040693Z", "completed_at": "2025-02-17T12:37:55.040716Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.2535076141357422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.passportcard_travel.unique_fact_premiums_CoverageId.2bc422d3f4", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    CoverageId as unique_field,\n    count(*) as n_records\n\nfrom `dev_passportcard_travel`.`dbt_ronhaim_gold`.`fact_premiums`\nwhere CoverageId is not null\ngroup by CoverageId\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-17T12:37:55.141442Z", "completed_at": "2025-02-17T12:37:55.300376Z"}, {"name": "execute", "started_at": "2025-02-17T12:37:55.305584Z", "completed_at": "2025-02-17T12:37:55.305599Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.2676112651824951, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.passportcard_travel.not_null_agg_premium_by_member_PolicyID.cd160df4d3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect PolicyID\nfrom `dev_passportcard_travel`.`dbt_ronhaim_gold`.`agg_premium_by_member`\nwhere PolicyID is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-17T12:37:55.152938Z", "completed_at": "2025-02-17T12:37:55.301432Z"}, {"name": "execute", "started_at": "2025-02-17T12:37:55.314581Z", "completed_at": "2025-02-17T12:37:55.314597Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.27605319023132324, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.passportcard_travel.unique_agg_premium_by_member_PolicyID.461c02ea70", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    PolicyID as unique_field,\n    count(*) as n_records\n\nfrom `dev_passportcard_travel`.`dbt_ronhaim_gold`.`agg_premium_by_member`\nwhere PolicyID is not null\ngroup by PolicyID\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}], "elapsed_time": 15.818453550338745, "args": {"static_parser": true, "compile": true, "project_dir": "/Workspace/Users/ron.haim@passportcard.com/Data-PassportcardIL", "macro_debugging": false, "partial_parse": true, "static": false, "source_freshness_run_project_hooks": false, "printer_width": 80, "profiles_dir": "/tmp", "debug": true, "require_explicit_package_overrides_for_builtin_materializations": true, "print": true, "state_modified_compare_vars": false, "require_batched_execution_for_custom_microbatch_strategy": false, "show_resource_report": false, "select": [], "which": "generate", "use_colors_file": true, "indirect_selection": "eager", "state_modified_compare_more_unrendered_values": false, "exclude": [], "write_json": true, "quiet": false, "warn_error_options": {"include": [], "exclude": []}, "require_resource_names_without_spaces": false, "introspect": true, "log_format_file": "debug", "invocation_command": "dbt docs generate --debug --profiles-dir /tmp", "strict_mode": false, "cache_selected_only": false, "log_file_max_bytes": 10485760, "partial_parse_file_diff": true, "log_level": "info", "log_level_file": "debug", "defer": false, "favor_state": false, "vars": {}, "log_path": "/Workspace/Users/ron.haim@passportcard.com/Data-PassportcardIL/logs", "use_colors": true, "require_yaml_configuration_for_mf_time_spines": false, "skip_nodes_if_on_run_start_fails": false, "log_format": "default", "empty_catalog": false, "populate_cache": true, "send_anonymous_usage_stats": true, "require_nested_cumulative_type_params": false, "version_check": true}}